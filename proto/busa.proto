// npx buf generate proto
syntax = "proto3";

enum Builtin {
    BOOLEAN_FALSE = 0;
    BOOLEAN_TRUE = 1;
    NAT_ZERO = 2;
    NAT_SUCC = 3;
    INT_PLUS = 4;
    INT_MINUS = 5;
    INT_TIMES = 6;
    STRING_CONCAT = 7;
    CHECK_GT = 8;
    CHECK_GEQ = 9;
    CHECK_LT = 10;
    CHECK_LEQ = 11;
    EQUAL = 12;
    NOT_EQUAL = 13;
}

message Pattern {
    enum PatternEnum {
        Unit = 0;
        Wildcard = 1;
    }

    message Structure {
        string name = 1;
        repeated Pattern args = 2;
    }

    oneof is {
        PatternEnum enum = 1;
        bool bool = 2;
        int32 var = 3;
        int64 int = 4;
        string string = 5;
        Structure structure = 6;
    }
}

message Conclusion {
    message IntermediateConclusion {
        string name = 1;
        repeated int32 vars = 2;
    }

    message DatalogConclusion {
        string name = 1;
        repeated Pattern vars = 2;
    }

    message OpenConclusion {
        string name = 1;
        repeated Pattern args = 2;
        repeated Pattern values = 3;
    }

    message ClosedConclusion {
        string name = 1;
        repeated Pattern args = 2;
        repeated Pattern values = 3;
    }

    oneof is {
        IntermediateConclusion intermediate = 1;
        DatalogConclusion datalog = 2;
        OpenConclusion open = 3;
        ClosedConclusion closed = 4;
    }
}

message Rule {
    message UnaryRule {
        string premise = 4;
        repeated Pattern args = 6;
        Conclusion conclusion = 7;
    }

    message JoinRule {
        string inName = 1;
        int32 numShared = 2;
        int32 numIn = 3;
        string premise = 4;
        repeated int32 args = 6;
        Conclusion conclusion = 7;
    }

    message BuiltInRule {
        string inName = 1;
        int32 numIn = 3;
        Builtin builtin = 5;
        repeated Pattern args = 6;
        Conclusion conclusion = 7; 
    }

    oneof is {
        UnaryRule unary = 1;
        JoinRule join = 2;
        BuiltInRule builtin = 3;
    }
}

message Program {
    repeated Rule rules = 1;
    repeated string seeds = 2;
    repeated string forbids = 3;
    repeated string demands = 4;
}